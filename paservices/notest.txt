to create the maven project
mvn archetype:generate -DgroupId=com.pythonarabia -DartifactId=paservices -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false

adjusted the pom file > clean > validate


== Postgres from Docker and connecting the microservice to ==
create docker-compose.yml file and from the same path run the command
>> docker-compose up -d
This will create pgadmin and postgres instance
docker compose ps
will show the instances status
pgadmin             pgadmin             running             443/tcp, 0.0.0.0:5050->80/tcp
postgres            postgres            running             0.0.0.0:5432->5432/tcp
open pgadmin from the browser
http://localhost:5050/browser/
add new server
Host postgres
Now the two docker instances are up and the pgadmin see the postgres and control it
add the data jpa and postgres driver dependancies  at the ms pom then reload
=============


== Fraud Application ==
configure different port at resources application.yml

Connect the customer microservice to the postgres
some configuration need to be pasted at the application.yml of the micro service
create new db from the same up and running docker file
configure fraud application.yml DB section
configure the pom file for jpa and postgre
========================


== Rest Template section ==
Rest template used at customer to call fraud service by its url and path the customer ID



== Eureka ==
Now we have customer micro service and fraud micro service
both need to talk to each others in such case classes are not shared since it is two seperate
modules and the only interface available is the APIs url
Eureka has two things
client installed at each ms and server where all the clients register at, and from that
server the ms get to know and reach each others
>>Install
copy the depenancy of the correct version from the website
paste it at the main pom dependancy management section
Eureka server setup
create totally new module name it eureka-server
at the new modile pom add the following dependancy
<dependencies>
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
    </dependency>
</dependencies>
create new package com.pythonarabia.eurekaserver
create applicaiton class and configure it
annotate the application class by @EnableEurekaServer
add application.yml
at yml the fetch and register are false as this is the server itself
check the dashboard
http://127.0.0.1:8761/
at the customer and fraud services paste the client dependancy of eureka and reload
at the customer and fraud application classes annotated as a Eureka client
and at both add eureka to the yml
after starting both services visit
http://127.0.0.1:8761/
you will find both are showing up
now at any URL call from any service you just need to mention the service name instead of the ip and port
@LoadBalanced must be exist at the bean or the code which call the RestTemplate class
===================






== OpenFeign ==
---------------
Create new module called clients this will host all the web clients
At the main pom
<dependency>
  <groupId>org.springframework.cloud</groupId>
  <artifactId>spring-cloud-starter-openfeign</artifactId>
</dependency>
cmd + p it helps in getting the class method
Create middle module to act like web clients for other modules\services
the middle module will work as a center web clients connect to everywhere so if you want API connection to anywhere
call it from that module
the module has @FeignClient annotation and connect to whatever URL
now you need to make other services use this web interface to grap data from other modules
add the dependancy at each module will use the middle web client
<dependency>
    <groupId>com.pythonarabia</groupId>
    <artifactId>webclient</artifactId>
    <version>1.0-SNAPSHOT</version>
    <scope>compile</scope>
</dependency>
At each module will use the middle web client we have to add
@EnableFeignClients(basePackages = "com.pythonarabia.fraud")
then at each module service will use the web client we start call it in this way

So in brief
post map to customer
customer controlled point to customer service
the customer service call the fraud feign client and pass the customer id to it
the feign client annotated as a feign client and value is fraud , fraud is registered at eureka load balancer
feign client has get method to the fraud service url
api/v1/fraud-check/{customerId}
the url hit the fraud service get method
it parse the customer id pass it to the service which pass it to the repository to save the check
and it respond to the feign client with boolean value of isfraudstercustomer then it moved vice versa
>> service calls FeignClient >> FC query eureka >> FC hit the destined service
-------------------



== Notification Service ==
Setup
create
    Notification application
    Notification class
    Notification Repository interface
Add spring, JPA, postgres and webclient dependencies
application.yml configuration
start the app to create the table
add the eureka configuration at the pom and application yml
start eureka server
start notifications application again to register
at the webclient app you will need to add the notifications\request and client
You need to add full notifications module too model application controller
The flow
create customer > notification client > URL open feign to notification module > save DB
notification client > void response




== Spring sleuth ==
Tracing the microservices
setup
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-sleuth</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-sleuth-zipkin</artifactId>
</dependency>
@application.yml
  zipkin:
    base-url: http://127.0.0.1:9411

add it to all the applications-modules
now for every call there will be id
zipkin is a tool to graph the IDs
setup
docker-compose.yml
add the followings
zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
docker-compose up -d
start all the service



== Spring cloud gateway ==
its all about API gateway and load balancer
create new module apigw
add dependencies
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-sleuth</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-sleuth-zipkin</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-gateway</artifactId>
</dependency>
adjust application.yml for spring zipkin and eureka
adjust banner.txt
add application to the package
> configure the api gateway to route the request to the service:
application.yml > spring section add
      cloud:
        gateway:
          routes:
            - id: customer
              uri: lb://CUSTOMER
              predicates:
                - Path=/api/v1/customers/**
> start the application and other applications
127.0.0.1:8083/api/v1/customers    (8083 the port of the gateway)
This will be routed to the customer from the load balancer



== Messaging ==
Rabbit MQ

to start RMQ in a container add the followings to the yml at the services section
rabbitmq:
    image: rabbitmq:3.9.11-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
docker-compose up -d
http://127.0.0.1:15672/
guest
guest

amqp module
create new module name it amqp
<dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-amqp</artifactId>
</dependency>
> create amqp package
create RabbitMQConfig class >> works as a medium producer which will receive the data convert it
to json and send it to the listner
create beans amqpTemplate and jacksonConverter
jacksonConverter to convert the message to JSON
amqpTemplate to make the MQ template
create listner simpleRabbitListenerContainerFactory

>> so the customer service will send the notification to the MQ EXCHANGE and Q then notificaiton
consume it

>> at the Notification service
add the dependancies
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-amqp</artifactId>
</dependency>
<dependency>
    <groupId>com.pythonarabia</groupId>
    <artifactId>amqp</artifactId>
    <version>1.0-SNAPSHOT</version>
</dependency>
application.yml << in this configuration you are pointing the service to the exchange and q >>
  rabbitmq:
    addresses: 127.0.0.1:5672
rabbitmq:
    exchanges:
        internal: internal.exchange
    queues:
        notification: notification.queue
    routing-keys:
        internal-notification: internal.notification.routing-key

>Create NotificationsConfig class and in this class you basically use the configuration
at the application.yml and create from them actual Bean to be used as a exchange and q
now the notifications service knows from where it will listen and consume the messages

> create producer
class to produce the message
at the amqp package create class RabbitMQMessageProducer
producer is a class to use it anywhere in your program to publish the message
when you use the produce you need to provide the payload , exchange and routingkey




>> at the customer service
add the dependancies
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-amqp</artifactId>
</dependency>
<dependency>
    <groupId>com.pythonarabia</groupId>
    <artifactId>amqp</artifactId>
    <version>1.0-SNAPSHOT</version>
</dependency>
> send message from csutomer to RabbitMQ then consume it at notfications
application.yml
  rabbitmq:
    addresses: 127.0.0.1:5672
at the customer application add the basePackages amqp and customer































































































